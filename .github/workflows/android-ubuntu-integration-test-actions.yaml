name: Android Ubuntu Integration tests

on:
  workflow_call:
    inputs:
      timestamp:
        required: true
        type: string
      cache-key:
        required: true
        type: string
      abi:
        required: true
        type: string
      api-level:
        required: true
        type: string

env:
  REPO-OWNER: ${{ github.repository_owner }}
  ABI: ${{ inputs.abi }}
  API-LEVEL: ${{ inputs.api-level }}
  TIMESTAMP: ${{ inputs.timestamp }}

jobs:
  android-ubuntu-integration-test-actions:
    name: Android Ubuntu Integration test
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        #test: ["offline_testsuite", "execute_sync_from_seed", "execute_send_from_orchard", "execute_currentprice_and_value_transfers_from_seed", "execute_sapling_balance_from_seed"]
        test: ["execute_currentprice_and_value_transfers_from_seed"]
    env:
      CACHE-KEY: ${{ inputs.cache-key }}
    steps:
      - name: Set envs for zingolib CI
        if: ${{ contains(github.repository, 'zingolib') }}
        run: echo "REPO-OWNER=zingolabs" >> $GITHUB_ENV
            
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO-OWNER }}/zingo-mobile

      - name: Set envs for x86_64
        if: ${{ env.ABI == 'x86_64' }}
        run: |
          echo "AVD-ARCH=x86_64" >> $GITHUB_ENV
          echo "NEXTEST-ABI=x86_64" >> $GITHUB_ENV

      - name: Set envs for x86
        if: ${{ env.ABI == 'x86' }}
        run: |
          echo "AVD-ARCH=x86" >> $GITHUB_ENV
          echo "NEXTEST-ABI=x86_32" >> $GITHUB_ENV

      - name: Set envs for arm64-v8a
        if: ${{ env.ABI == 'arm64-v8a' }}
        run: |
          echo "AVD-ARCH=x86_64" >> $GITHUB_ENV
          echo "NEXTEST-ABI=arm64" >> $GITHUB_ENV

      - name: Set envs for armeabi-v7a
        if: ${{ env.ABI == 'armeabi-v7a' }}
        run: |
          echo "AVD-ARCH=x86" >> $GITHUB_ENV
          echo "NEXTEST-ABI=arm32" >> $GITHUB_ENV

      - name: Remove unnecessary directories to free up space
        run: |
          echo "Disk space before post-build cleanup:"
          df -h
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/lib/android/sdk/ndk
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo apt-get clean
          echo "Disk space after post-build cleanup:"
          df -h

      - name: socket
        run: |
          sudo chmod 777 /var/run/docker.sock
          ls -la /var/run/docker.sock
          sudo systemctl status docker
          sudo chmod 777 ./scripts/integration_tests_actions.sh
          ls -la ./scripts/integration_tests_actions.sh

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Install protoc
        run: sudo apt install protobuf-compiler

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install nextest
        uses: taiki-e/install-action@v2
        with:
          tool: nextest

      - name: Cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: rust

      - name: Pull regchest docker image
        run: docker pull zingodevops/regchest:008

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.2
          build-root-directory: ./android
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/dev'}}
      
      - name: Native rust cache
        uses: actions/cache/restore@v4
        with:
          path: android/app/src/main/jniLibs/${{ env.ABI }}
          key: native-android-uniffi-${{ env.ABI }}-${{ env.CACHE-KEY }}
          fail-on-cache-miss: true

      - name: Kotlin uniffi cache
        uses: actions/cache/restore@v4
        with:
          path: android/app/build/generated/source/uniffi/debug/java/uniffi/zingo
          key: kotlin-android-uniffi-${{ env.ABI }}-${{ env.CACHE-KEY }}
          fail-on-cache-miss: true

      - name: Restore AVD cache
        uses: actions/cache/restore@v4
        id: avd-cache
        with: 
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ env.ABI }}-api-${{ env.API-LEVEL }}-integ

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API-LEVEL }}
          arch: ${{ env.AVD-ARCH }}
          force-avd-creation: false
          emulator-options: -no-snapshot-load -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Save AVD cache
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        id: avd-cache-saving
        with: 
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ env.ABI }}-api-${{ env.API-LEVEL }}-integ

      - name: Yarn install
        run: yarn
      
      - name: Run Build
        working-directory: android
        run: ./gradlew assembleDebug assembleAndroidTest -DtestBuildType=debug -PsplitApk=true

      - name: Yarn Start
        run: nohup yarn start > "yarn_react_native_start.out" &

      - name: Run Integration Test
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.API-LEVEL }}
          arch: ${{ env.AVD-ARCH }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          #script: bash ./scripts/integration_tests_actions.sh -a ${{ env.ABI }}
          script: cargo nextest run ${{ env.NEXTEST-ABI }}::${{ matrix.test }} --features "ci regchest actions" --verbose --release
          working-directory: ./rust

      - name: Upload test reports
        if: ${{ ! cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-integration-reports-${{ env.ABI }}-${{ matrix.test }}-${{ env.TIMESTAMP }}
          path: android/app/build/outputs/integration_test_reports
